{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text","todoList","componentDidMount","_this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","Object","assertThisInitialized","componentWillUnmount","removeEventListener","cachedList","localStorage","getItem","JSON","parse","setState","showText","event","target","value","addToList","toConsumableArray","push","item","completed","hover","deleteTodo","index","filter","_","indexOfItem","handleKeyPress","key","hoverOn","map","todoItem","hoverOff","completedTodo","setItem","stringify","this","_this2","react_default","a","createElement","className","type","onChange","onKeyPress","onClick","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","defaultChecked","concat","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7bdc804.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        text: \"\",\n        todoList: [],\n    };\n\n    componentDidMount = () => {\n        this.hydrateStateWithLocalStorage();\n        window.addEventListener(\n            \"beforeunload\",\n            this.saveStateToLocalStorage.bind(this)\n        );\n    };\n\n    componentWillUnmount = () => {\n        window.removeEventListener(\n            \"beforeunload\",\n            this.saveStateToLocalStorage.bind(this)\n        );\n        this.saveStateToLocalStorage();\n    };\n\n    saveStateToLocalStorage() {\n        localStorage.setItem('todoList', JSON.stringify(this.state['todoList']));\n    }\n\n    hydrateStateWithLocalStorage = () => {\n        let cachedList = localStorage.getItem('todoList');\n        let todoList = JSON.parse(cachedList);\n        this.setState({\n            todoList\n        });\n    };\n\n    showText = (event) => {\n        this.setState({\n            text: event.target.value\n        });\n    };\n\n    addToList = () => {\n        var todoList = [...this.state.todoList];\n        if(this.state.text) {\n            todoList.push({item: this.state.text, completed: false, hover: false});\n        }\n        this.setState({\n            todoList,\n            text: \"\"\n        });\n    };\n\n    deleteTodo = (index) => {\n        let todoList = [...this.state.todoList]\n            .filter((_, indexOfItem) => indexOfItem !== index);\n        this.setState({\n            todoList\n        });\n    };\n    handleKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            this.showText(event);\n            this.addToList()\n        }\n    };\n    hoverOn = (index) => {\n        let todoList = [...this.state.todoList]\n            .map((todoItem, indexOfItem) => {\n                if (indexOfItem === index) {\n                    todoItem.hover = true\n                }\n                return todoItem;\n            });\n        this.setState({\n            todoList\n        })\n    };\n    hoverOff = (index) => {\n        let todoList = [...this.state.todoList]\n            .map((todoItem, indexOfItem) => {\n                if (indexOfItem === index) {\n                    todoItem.hover = false\n                }\n                return todoItem;\n            });\n        this.setState({\n            todoList\n        })\n    };\n        completedTodo = (index) => {\n            let todoList = [...this.state.todoList]\n                .map((todoItem, indexOfItem) => {\n                    if (indexOfItem === index) {\n                        todoItem.completed = !todoItem.completed\n                    }\n                    return todoItem;\n                });\n\n            this.setState({\n                todoList\n            });\n        };\n\n        render()\n        {\n            return (\n                <div className=\"App jumbotron container \">\n                    <div className=\"addTodo\">\n                        <input type=\"text\" className=\"col-sm-6\" onChange={this.showText} value={this.state.text}\n                               onKeyPress={this.handleKeyPress.bind(this)}/>\n                        <button className=\"add btn btn-info\" onClick={this.addToList}>Add</button>\n                    </div>\n                    {\n                        this.state.todoList.map((todoItem, index) => {\n                                return (\n                                    <div key={index} className=\"todoItem\" onMouseEnter={this.hoverOn.bind(this, index)}\n                                         onMouseLeave={this.hoverOff.bind(this, index)} onTouchStart={this.hoverOn.bind(this, index)} onTouchEnd={this.hoverOff.bind(this, index)}>\n                                        <input type=\"checkbox\" defaultChecked={todoItem.completed}\n                                               onClick={this.completedTodo.bind(this, index)}\n                                               className={todoItem.hover ? \"show\" : \"hide\"}/>\n                                        <div className={todoItem.completed ? \"strike\" : \"\"}>{todoItem.item}</div>\n                                        <button className={`btn btn-danger ${todoItem.hover ? \"show\" : \"hide\"}`}\n                                                onClick={this.deleteTodo.bind(this, index)}>x\n                                        </button>\n                                    </div>\n                                )\n                            }\n                        )\n                    }\n                </div>\n            );\n        }\n    }\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text","todoList","componentDidMount","_this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","Object","assertThisInitialized","componentWillUnmount","removeEventListener","cachedList","localStorage","getItem","JSON","parse","setState","showText","event","target","value","addToList","toConsumableArray","push","item","completed","deleteTodo","index","filter","_","indexOfItem","completedTodo","map","todoItem","setItem","stringify","this","_this2","react_default","a","createElement","className","class","type","onChange","onClick","key","defaultChecked","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRA2GeA,iNAvGXC,MAAQ,CACJC,KAAM,GACNC,SAAU,MAGdC,kBAAoB,WAChBC,EAAKC,+BACLC,OAAOC,iBACH,eACAH,EAAKI,wBAAwBC,KAA7BC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAN,SAIRQ,qBAAuB,WACnBN,OAAOO,oBACH,eACAT,EAAKI,wBAAwBC,KAA7BC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAN,MAEJA,EAAKI,6BAQTH,6BAA+B,WAC3B,IAAIS,EAAaC,aAAaC,QAAQ,YAClCd,EAAWe,KAAKC,MAAMJ,GAC1BV,EAAKe,SAAS,CACVjB,gBAIRkB,SAAW,SAACC,GACRjB,EAAKe,SAAS,CACVlB,KAAMoB,EAAMC,OAAOC,WAI3BC,UAAY,WACR,IAAItB,EAAQQ,OAAAe,EAAA,EAAAf,CAAON,EAAKJ,MAAME,UAC9BA,EAASwB,KAAK,CAACC,KAAMvB,EAAKJ,MAAMC,KAAM2B,WAAW,IAEjDxB,EAAKe,SAAS,CACVjB,WACAD,KAAM,QAId4B,WAAa,SAACC,GACV,IAAI5B,EAAWQ,OAAAe,EAAA,EAAAf,CAAIN,EAAKJ,MAAME,UACzB6B,OAAO,SAACC,EAAGC,GAAJ,OAAoBA,IAAgBH,IAChD1B,EAAKe,SAAS,CACVjB,gBAIRgC,cAAgB,SAACJ,GACb,IAAI5B,EAAWQ,OAAAe,EAAA,EAAAf,CAAIN,EAAKJ,MAAME,UACzBiC,IAAI,SAACC,EAAUH,GAIZ,OAHIA,IAAgBH,IAChBM,EAASR,WAAYQ,EAASR,WAE3BQ,IAGfhC,EAAKe,SAAS,CACVjB,uGA7CJa,aAAasB,QAAQ,WAAYpB,KAAKqB,UAAUC,KAAKvC,MAAL,4CAiD3C,IAAAwC,EAAAD,KACL,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,WACXJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOF,UAAU,WAAWG,SAAUR,KAAKnB,SAAUG,MAAOgB,KAAKvC,MAAMC,OACnFwC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBI,QAAST,KAAKf,WAAnD,QAGIe,KAAKvC,MAAME,SAASiC,IAAI,SAACC,EAAUN,GAC3B,OACIW,EAAAC,EAAAC,cAAA,OAAKM,IAAKnB,EAAOc,UAAU,YACvBH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWI,iBAAgBd,EAASR,UACzCoB,QAASR,EAAKN,cAAczB,KAAK+B,EAAMV,KAC9CW,EAAAC,EAAAC,cAAA,QAAMC,UAAWR,EAASR,UAAY,SAAW,IAAKQ,EAAST,MAC/Dc,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBI,QAASR,EAAKX,WAAWpB,KAAK+B,EAAMV,IAAvE,gBAvFlBqB,aCQEC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2b4cd59f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        text: \"\",\n        todoList: []\n    };\n\n    componentDidMount = () => {\n        this.hydrateStateWithLocalStorage();\n        window.addEventListener(\n            \"beforeunload\",\n            this.saveStateToLocalStorage.bind(this)\n        );\n    };\n\n    componentWillUnmount = () => {\n        window.removeEventListener(\n            \"beforeunload\",\n            this.saveStateToLocalStorage.bind(this)\n        );\n        this.saveStateToLocalStorage();\n    };\n\n    saveStateToLocalStorage() {\n\n        localStorage.setItem('todoList', JSON.stringify(this.state['todoList']));\n    }\n\n    hydrateStateWithLocalStorage = () => {\n        let cachedList = localStorage.getItem('todoList');\n        let todoList = JSON.parse(cachedList);\n        this.setState({\n            todoList\n        });\n    };\n\n    showText = (event) => {\n        this.setState({\n            text: event.target.value\n        });\n    };\n\n    addToList = () => {\n        var todoList = [...this.state.todoList];\n        todoList.push({item: this.state.text, completed: false});\n\n        this.setState({\n            todoList,\n            text: \"\"\n        });\n    };\n\n    deleteTodo = (index) => {\n        let todoList = [...this.state.todoList]\n            .filter((_, indexOfItem) => indexOfItem !== index);\n        this.setState({\n            todoList\n        });\n    };\n\n    completedTodo = (index) => {\n        let todoList = [...this.state.todoList]\n            .map((todoItem, indexOfItem) => {\n                if (indexOfItem === index) {\n                    todoItem.completed = todoItem.completed ? false : true\n                }\n                return todoItem;\n            });\n\n        this.setState({\n            todoList\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App jumbotron container \">\n                <div class=\"addTodo\">\n                <input type=\"text\" className=\"col-sm-6\" onChange={this.showText} value={this.state.text}></input>\n                <button className=\"add btn btn-info\" onClick={this.addToList}>Add</button>\n                </div>\n                {\n                    this.state.todoList.map((todoItem, index) => {\n                            return (\n                                <div key={index} className=\"todoItem\">\n                                    <input type=\"checkbox\" defaultChecked={todoItem.completed ? true : false}\n                                           onClick={this.completedTodo.bind(this, index)} />\n                                    <span className={todoItem.completed ? \"strike\" : \"\"}>{todoItem.item}</span>\n                                    <button className=\"btn btn-danger\" onClick={this.deleteTodo.bind(this, index)}>x</button>\n                                </div>\n                            )\n                        }\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nfunction ShowText(prop) {\n    return (\n        <p>{prop.text}</p>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}